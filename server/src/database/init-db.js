const mysql = require('mysql2/promise');
const fs = require('fs');
const fsPromises = require('fs').promises;
const path = require('path');
const dotenv = require('dotenv');

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
const envPath = path.resolve(__dirname, '../../.env');
console.log('üîç –ò—â–µ–º —Ñ–∞–π–ª .env –ø–æ –ø—É—Ç–∏:', envPath);

if (fs.existsSync(envPath)) {
    console.log('‚úÖ –§–∞–π–ª .env –Ω–∞–π–¥–µ–Ω');
    dotenv.config({ path: envPath });
} else {
    console.error('‚ùå –§–∞–π–ª .env –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ –ø—É—Ç–∏:', envPath);
    process.exit(1);
}

// –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
const requiredEnvVars = ['DB_HOST', 'DB_USER', 'DB_PASSWORD', 'DB_NAME'];
const missingEnvVars = requiredEnvVars.filter(varName => !process.env[varName]);

if (missingEnvVars.length > 0) {
    console.error('‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è:', missingEnvVars.join(', '));
    console.error('‚ÑπÔ∏è –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ñ–∞–π–ª .env —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ —Å–æ–¥–µ—Ä–∂–∏—Ç –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ');
    console.log('üìù –¢–µ–∫—É—â–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è:');
    requiredEnvVars.forEach(varName => {
        console.log(`${varName}: ${process.env[varName] || '–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ'}`);
    });
    process.exit(1);
}

async function executeSqlFile(connection, filePath) {
    try {
        const sqlScript = await fsPromises.readFile(filePath, 'utf8');
        
        // –†–∞–∑–±–∏–≤–∞–µ–º —Å–∫—Ä–∏–ø—Ç –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã
        const queries = [];
        let currentQuery = '';
        let delimiter = ';';
        let inDelimiterBlock = false;
        
        for (const line of sqlScript.split('\n')) {
            const trimmedLine = line.trim();
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—è
            if (trimmedLine.startsWith('DELIMITER')) {
                if (!inDelimiterBlock) {
                    delimiter = trimmedLine.split(' ')[1];
                    inDelimiterBlock = true;
                } else {
                    delimiter = ';';
                    inDelimiterBlock = false;
                }
                continue;
            }
            
            // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç—Ä–æ–∫—É –∫ —Ç–µ–∫—É—â–µ–º—É –∑–∞–ø—Ä–æ—Å—É
            currentQuery += line + '\n';
            
            // –ï—Å–ª–∏ —Å—Ç—Ä–æ–∫–∞ –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è —Ç–µ–∫—É—â–∏–º —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–µ–º
            if (currentQuery.trim().endsWith(delimiter)) {
                // –£–¥–∞–ª—è–µ–º —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å –∏ –¥–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å
                const query = currentQuery.trim().slice(0, -delimiter.length);
                if (query) {
                    queries.push(query);
                }
                currentQuery = '';
            }
        }
        
        // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –∑–∞–ø—Ä–æ—Å, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
        if (currentQuery.trim()) {
            queries.push(currentQuery.trim());
        }

        // –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å—ã
        for (const query of queries) {
            if (query.trim()) {
                await connection.query(query);
            }
        }
        
        console.log(`‚úÖ SQL-—Å–∫—Ä–∏–ø—Ç ${path.basename(filePath)} —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω`);
    } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ SQL-—Å–∫—Ä–∏–ø—Ç–∞ ${path.basename(filePath)}:`, error);
        throw error;
    }
}

async function dropDatabase(connection) {
    try {
        await connection.query(`DROP DATABASE IF EXISTS ${process.env.DB_NAME}`);
        console.log(`üóëÔ∏è –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö ${process.env.DB_NAME} —É–¥–∞–ª–µ–Ω–∞`);
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:', error);
        throw error;
    }
}

async function createDatabase(connection) {
    try {
        await connection.query(`CREATE DATABASE ${process.env.DB_NAME}`);
        console.log(`üì¶ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö ${process.env.DB_NAME} —Å–æ–∑–¥–∞–Ω–∞`);
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:', error);
        throw error;
    }
}

async function useDatabase(connection) {
    try {
        await connection.query(`USE ${process.env.DB_NAME}`);
        console.log(`üîå –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö ${process.env.DB_NAME}`);
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:', error);
        throw error;
    }
}

async function checkDatabaseExists(connection) {
    try {
        const [rows] = await connection.query(
            `SELECT SCHEMA_NAME FROM INFORMATION_SCHEMA.SCHEMATA WHERE SCHEMA_NAME = ?`,
            [process.env.DB_NAME]
        );
        return rows.length > 0;
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:', error);
        throw error;
    }
}

async function checkTablesExist(connection) {
    try {
        const [rows] = await connection.query(
            `SELECT COUNT(*) as count FROM information_schema.tables 
             WHERE table_schema = ?`,
            [process.env.DB_NAME]
        );
        return rows[0].count > 0;
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü:', error);
        throw error;
    }
}

async function initializeDatabase() {
    let connection;

    try {
        // –°–æ–∑–¥–∞–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MySQL –±–µ–∑ —É–∫–∞–∑–∞–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        connection = await mysql.createConnection({
            host: process.env.DB_HOST,
            user: process.env.DB_USER,
            password: process.env.DB_PASSWORD
        });

        console.log(`üîå –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MySQL —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ (${process.env.DB_USER}@${process.env.DB_HOST})`);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        const dbExists = await checkDatabaseExists(connection);
        
        if (dbExists) {
            console.log(`‚ÑπÔ∏è –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö ${process.env.DB_NAME} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç`);
            
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            await useDatabase(connection);
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü
            const tablesExist = await checkTablesExist(connection);
            
            if (tablesExist) {
                console.log('‚ÑπÔ∏è –¢–∞–±–ª–∏—Ü—ã —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç');
                
                // –°–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
                const readline = require('readline').createInterface({
                    input: process.stdin,
                    output: process.stdout
                });

                const answer = await new Promise(resolve => {
                    readline.question('–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –ü–µ—Ä–µ—Å–æ–∑–¥–∞—Ç—å? (y/n): ', resolve);
                });
                readline.close();

                if (answer.toLowerCase() === 'y') {
                    // –£–¥–∞–ª—è–µ–º –∏ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
                    await dropDatabase(connection);
                    await createDatabase(connection);
                    await useDatabase(connection);
                    await executeSqlFile(connection, path.join(__dirname, 'init.sql'));
                    await executeSqlFile(connection, path.join(__dirname, 'seed.sql'));
                    console.log('‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∞ –∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞ —Ç–µ—Å—Ç–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏');
                } else {
                    console.log('‚ÑπÔ∏è –û—Å—Ç–∞–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π');
                }
            } else {
                // –ï—Å–ª–∏ –±–∞–∑–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –Ω–æ —Ç–∞–±–ª–∏—Ü –Ω–µ—Ç
                await executeSqlFile(connection, path.join(__dirname, 'init.sql'));
                await executeSqlFile(connection, path.join(__dirname, 'seed.sql'));
                console.log('‚úÖ –¢–∞–±–ª–∏—Ü—ã —Å–æ–∑–¥–∞–Ω—ã –∏ –∑–∞–ø–æ–ª–Ω–µ–Ω—ã —Ç–µ—Å—Ç–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏');
            }
        } else {
            // –ï—Å–ª–∏ –±–∞–∑–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            await createDatabase(connection);
            await useDatabase(connection);
            await executeSqlFile(connection, path.join(__dirname, 'init.sql'));
            await executeSqlFile(connection, path.join(__dirname, 'seed.sql'));
            console.log('‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Å–æ–∑–¥–∞–Ω–∞ –∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞ —Ç–µ—Å—Ç–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏');
        }

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:', error);
        throw error;
    } finally {
        if (connection) {
            await connection.end();
            console.log('üîå –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫—Ä—ã—Ç–æ');
        }
    }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é
console.log('üöÄ –ù–∞—á–∏–Ω–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...');
initializeDatabase()
    .then(() => {
        console.log('‚úÖ –°–∫—Ä–∏–ø—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω');
        process.exit(0);
    })
    .catch(error => {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Å–∫—Ä–∏–ø—Ç–∞:', error);
        process.exit(1);
    }); 